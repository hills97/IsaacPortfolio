gro$item <- as_factor(gro$item)
# Create new columns with number of dates since #epoch date(January 1, 1970).
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$month <- month(gro$date)
gro$weekday <- weekdays(gro$date)
item_list <- unique(gro$item)
num_items <- length(list)
member_list <- unique(gro$member_id)
num_members <- length(member_list)
# Showing number of transactions.
num_trans <- length(unique(gro$trans_id))
kable(head(gro))
item_list
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-count$num),]
# Add a field that converts count to fraction of total purchases
sorted_count$portion <- sorted_count$num/num_trans
top_ten <- sorted_count[1:10,]
# Reverse the order for horizontal Pareto chart
top_ten_rev<- sorted_count[10:1,]
#graph for top ten
top_ten$item <- factor(top_ten$item, levels = top_ten_rev$item)
top_ten_graph <- ggplot(data = top_ten, aes(x = item, y = portion)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 items", y = "Fraction of transaction") +
coord_flip()
top_ten
top_ten_graph
# Pull out shopping trips by unique transaction id
day <- unique(data.frame(weekday = grocery$weekday, trans_id = grocery$trans_id))
# Pull out shopping trips by unique transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Make sure the days of the week are in order
days$weekday <- factor(days$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Pull out shopping trips by unique transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Make sure the days of the week are in order
day$weekday <- factor(day$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Group shopping trips by days of the week and get count of trips per day
daily_trans <- day %>%
group_by(weekday) %>%
dplyr::summarize(n = n())
ggplot(data = day, aes(x = weekday)) +
geom_bar()
# Presents shopping trips by  transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Puts days in order
day$weekday <- factor(day$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Arrange shopping trips by days of the week count them by day
daily_trans <- day %>%
group_by(weekday) %>%
dplyr::summarize(n = n())
per_day <- ggplot(data = day, aes(x = weekday)) +
geom_bar()
per_day
per_day
zoomed_per_day <- ggplot(data = days, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2300))
zoomed_per_day <- ggplot(data = day, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2300))
ggplot(data = day, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2300))
ggplot(data = day, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2400))
ggplot(data = day, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2250))
ggplot(data = day, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2200))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(arules)
library(arulesViz)
library(knitr)
gro <- read.csv(file = "Groceries_dataset.csv")
kable(head(gro))
# Rename and re-class the columns
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
gro$date <- as_date(dmy(gro$date))
gro$item <- as_factor(gro$item)
# Create new columns with number of dates since #epoch date(January 1, 1970).
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$month <- month(gro$date)
gro$weekday <- weekdays(gro$date)
item_list <- unique(gro$item)
num_items <- length(list)
member_list <- unique(gro$member_id)
num_members <- length(member_list)
# Showing number of transactions.
num_trans <- length(unique(gro$trans_id))
paste0("From 2014 to 2015, there were ",num_trans, " transactions.")
kable(head(gro))
item_list
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-count$num),]
# Add a field that converts count to fraction of total purchases
sorted_count$portion <- sorted_count$num/num_trans
top_ten <- sorted_count[1:10,]
# Reverse the order for horizontal Pareto chart
top_ten_rev<- sorted_count[10:1,]
#graph for top ten
top_ten$item <- factor(top_ten$item, levels = top_ten_rev$item)
top_ten_graph <- ggplot(data = top_ten, aes(x = item, y = portion)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 items", y = "Fraction of transaction") +
coord_flip()
top_ten
top_ten_graph
# Presents shopping trips by  transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Puts days in order
day$weekday <- factor(day$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Arrange shopping trips by days of the week count them by day
daily_trans <- day %>%
group_by(weekday) %>%
dplyr::summarize(n = n())
per_day <- ggplot(data = day, aes(x = weekday)) +
geom_bar()
per_day
ggplot(data = day, aes(x = weekday)) +
geom_bar() +
coord_cartesian(ylim = c(2000,2200))
is.na(gro)
sum(is.na(gro))
View(gro)
milk <- gro[gro$item == "whole milk",-c(1,2,3,6)]
other_veg <- gro[gro$item == "other vegetables",-c(1,2,3,6)]
root_veg <- gro[gro$item == "root vegetables",-c(1,2,3,6)]
rolls <- gro[gro$item == "rolls/buns",-c(1,2,3,6)]
soda <- gro[gro$item == "soda",-c(1,2,3,6)]
yogurt <- gro[gro$item == "yogurt",-c(1,2,3,6)]
tropic_fruit <- gro[gro$item == "tropical fruit",-c(1,2,3,6)]
citrus_fruit <- gro[gro$item == "citrus fruit",-c(1,2,3,6)]
water <- gro[gro$item == "bottled water",-c(1,2,3,6)]
sausage <- gro[gro$item == "sausage",-c(1,2,3,6)]
# Combine two years of data and group by month of the year
by_month <- function(x) {
x %>%
group_by(month) %>%
dplyr::summarize(num = n())
}
milk <- gro[gro$item == "whole milk",-c(1,2,3,6)]
other_veg <- gro[gro$item == "other vegetables",-c(1,2,3,6)]
root_veg <- gro[gro$item == "root vegetables",-c(1,2,3,6)]
rolls <- gro[gro$item == "rolls/buns",-c(1,2,3,6)]
soda <- gro[gro$item == "soda",-c(1,2,3,6)]
yogurt <- gro[gro$item == "yogurt",-c(1,2,3,6)]
tropic_fruit <- gro[gro$item == "tropical fruit",-c(1,2,3,6)]
citrus_fruit <- gro[gro$item == "citrus fruit",-c(1,2,3,6)]
water <- gro[gro$item == "bottled water",-c(1,2,3,6)]
sausage <- gro[gro$item == "sausage",-c(1,2,3,6)]
# Combine two years of data and group by month of the year
by_month <- function(x) {
x %>%
group_by(month) %>%
dplyr::summarize(num = n())
}
month_milk <- by_month(milk)
month_other_veg <- by_month(other_veg)
month_root_veg <- by_month(root_veg)
month_rolls <- by_month(rolls)
month_soda <- by_month(soda)
month_yogurt <- by_month(yogurt)
month_tropic_fruit <- by_month(tropic_fruit)
month_citrus_fruit <- by_month(citrus_fruit)
month_water <- by_month(water)
month_sausage <- by_month(sausage)
table <- data.frame(month = as.numeric(c(1:12)),
milk = month_milk$num,
other_veg = month_other_veg$num,
root_veg = month_root_veg$num,
rolls = month_rolls$num,
soda = month_soda$num,
yogurt = month_yogurt$num,
tropic_fruit = month_tropic_fruit$num,
citrus_fruit =month_citrus_fruit$num,
water = month_water$num,
sausage = month_sausage$num)
milk <- gro[gro$item == "whole milk",-c(1,2,3,6)]
other_veg <- gro[gro$item == "other vegetables",-c(1,2,3,6)]
root_veg <- gro[gro$item == "root vegetables",-c(1,2,3,6)]
rolls <- gro[gro$item == "rolls/buns",-c(1,2,3,6)]
soda <- gro[gro$item == "soda",-c(1,2,3,6)]
yogurt <- gro[gro$item == "yogurt",-c(1,2,3,6)]
tropic_fruit <- gro[gro$item == "tropical fruit",-c(1,2,3,6)]
citrus_fruit <- gro[gro$item == "citrus fruit",-c(1,2,3,6)]
water <- gro[gro$item == "bottled water",-c(1,2,3,6)]
sausage <- gro[gro$item == "sausage",-c(1,2,3,6)]
# Combine two years of data and group by month of the year
by_month <- function(x) {
x %>%
group_by(month) %>%
dplyr::summarize(num = n())
}
month_milk <- by_month(milk)
month_other_veg <- by_month(other_veg)
month_root_veg <- by_month(root_veg)
month_rolls <- by_month(rolls)
month_soda <- by_month(soda)
month_yogurt <- by_month(yogurt)
month_tropic_fruit <- by_month(tropic_fruit)
month_citrus_fruit <- by_month(citrus_fruit)
month_water <- by_month(water)
month_sausage <- by_month(sausage)
month_table <- data.frame(month = as.numeric(c(1:12)),
milk = month_milk$num,
other_veg = month_other_veg$num,
root_veg = month_root_veg$num,
rolls = month_rolls$num,
soda = month_soda$num,
yogurt = month_yogurt$num,
tropic_fruit = month_tropic_fruit$num,
citrus_fruit =month_citrus_fruit$num,
water = month_water$num,
sausage = month_sausage$num)
kable(month_table)
# Plotting top six
top_six <- ggplot(data = month_table, aes(x = month)) +
geom_line(aes(y = milk, color = "black")) +
geom_line(aes(y = other_veg, color = "blue")) +
geom_line(aes(y = rolls, color = "orange")) +
geom_line(aes(y = soda, color = "red")) +
geom_line(aes(y = yogurt, color = "cyan")) +
scale_x_continuous("month",
breaks = c(1:12),
labels = month.abb) +
ylab("Number of Purchases") +
theme(legend.position = "right") +
scale_color_identity(name = "Product",
breaks = c("black", "blue", "orange", "red", "cyan"),
labels = c("Milk", "Other Vegetables", "Rolls/Buns", "Soda", "yogurt"),
guide = "legend")
# Plotting top six
top_six <- ggplot(data = month_table, aes(x = month)) +
geom_line(aes(y = milk, color = "brown")) +
geom_line(aes(y = other_veg, color = "red")) +
geom_line(aes(y = rolls, color = "black")) +
geom_line(aes(y = soda, color = "blue")) +
geom_line(aes(y = yogurt, color = "purple")) +
scale_x_continuous("month",
breaks = c(1:12),
labels = month.abb) +
ylab("Number of Purchases") +
scale_color_identity(name = "Product",
breaks = c("brown", "red", "black", "blue", "purple"),
labels = c("Milk", "Other Vegetables", "Rolls/Buns", "Soda", "yogurt"),
guide = "legend")
top_six
# Plotting top six
top_six <- ggplot(data = month_table, aes(x = month)) +
geom_line(aes(y = milk, color = "red")) +
geom_line(aes(y = other_veg, color = "green")) +
geom_line(aes(y = rolls, color = "black")) +
geom_line(aes(y = soda, color = "blue")) +
geom_line(aes(y = yogurt, color = "purple")) +
scale_x_continuous("month",
breaks = c(1:12),
labels = month.abb) +
ylab("Number of Purchases") +
scale_color_identity(name = "Product",
breaks = c("red", "green", "black", "blue", "purple"),
labels = c("Milk", "Other Vegetables", "Rolls/Buns", "Soda", "yogurt"),
guide = "legend")
top_six
# Plotting top six
top_six <- ggplot(data = month_table, aes(x = month)) +
geom_line(aes(y = milk, color = "red")) +
geom_line(aes(y = other_veg, color = "green")) +
geom_line(aes(y = rolls, color = "black")) +
geom_line(aes(y = soda, color = "blue")) +
geom_line(aes(y = yogurt, color = "purple")) +
scale_x_continuous("month",
breaks = c(1:12),
labels = month.abb) +
ylab("Number of Transactions") +
scale_color_identity(name = "Product",
breaks = c("red", "green", "black", "blue", "purple"),
labels = c("Milk", "Other Vegetables", "Rolls/Buns", "Soda", "yogurt"),
guide = "legend")
# Presents shopping trips by  transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Puts days in order
day$weekday <- factor(day$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Arrange shopping trips by days of the week count them by day
daily_trans <- day %>%
group_by(weekday) %>%
dplyr::summarize(n = n())
per_day <- ggplot(data = day, aes(x = weekday), fill = "steelblue") +
geom_bar()
per_day
# Presents shopping trips by  transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Puts days in order
day$weekday <- factor(day$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Arrange shopping trips by days of the week count them by day
daily_trans <- day %>%
group_by(weekday) %>%
dplyr::summarize(n = n())
per_day <- ggplot(data = day, aes(x = weekday), ) +
geom_bar(fill = "steelblue")
per_day
ggplot(data = day, aes(x = weekday)) +
geom_bar(fill = "steelblue") +
coord_cartesian(ylim = c(2000,2200))
showing number of transactions
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(arules)
library(arulesViz)
library(knitr)
gro <- read.csv(file = "Groceries_dataset.csv")
kable(head(gro))
# Checking NA values
sum(is.na(gro))
# Rename and re-class the columns
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
gro$date <- as_date(dmy(gro$date))
gro$item <- as_factor(gro$item)
# Create new columns with number of dates since #epoch date(January 1, 1970).
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$month <- month(gro$date)
gro$weekday <- weekdays(gro$date)
item_list <- unique(gro$item)
num_items <- length(list)
member_list <- unique(gro$member_id)
num_members <- length(member_list)
# Showing number of transactions.
num_trans <- length(unique(gro$trans_id))
paste0("From 2014 to 2015, there were ",num_trans, " transactions.")
kable(head(gro))
item_list
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-count$num),]
# Add a field that converts count to fraction of total purchases
sorted_count$portion <- sorted_count$num/num_trans
top_ten <- sorted_count[1:10,]
# Reverse the order for horizontal Pareto chart
top_ten_rev<- sorted_count[10:1,]
#graph for top ten
top_ten$item <- factor(top_ten$item, levels = top_ten_rev$item)
top_ten_graph <- ggplot(data = top_ten, aes(x = item, y = portion)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Top 10 items", y = "Fraction of transaction") +
coord_flip()
top_ten
top_ten_graph
# Presents shopping trips by  transaction id
day <- unique(data.frame(weekday = gro$weekday, trans_id = gro$trans_id))
# Puts days in order
day$weekday <- factor(day$weekday, levels = c('Sunday', 'Monday', 'Tuesday',
'Wednesday', 'Thursday', 'Friday', 'Saturday'))
# Arrange shopping trips by days of the week count them by day
daily_trans <- day %>%
group_by(weekday) %>%
dplyr::summarize(n = n())
per_day <- ggplot(data = day, aes(x = weekday), ) +
geom_bar(fill = "steelblue")
per_day
ggplot(data = day, aes(x = weekday)) +
geom_bar(fill = "steelblue") +
coord_cartesian(ylim = c(2000,2200))
milk <- gro[gro$item == "whole milk",-c(1,2,3,6)]
other_veg <- gro[gro$item == "other vegetables",-c(1,2,3,6)]
root_veg <- gro[gro$item == "root vegetables",-c(1,2,3,6)]
rolls <- gro[gro$item == "rolls/buns",-c(1,2,3,6)]
soda <- gro[gro$item == "soda",-c(1,2,3,6)]
yogurt <- gro[gro$item == "yogurt",-c(1,2,3,6)]
tropic_fruit <- gro[gro$item == "tropical fruit",-c(1,2,3,6)]
citrus_fruit <- gro[gro$item == "citrus fruit",-c(1,2,3,6)]
water <- gro[gro$item == "bottled water",-c(1,2,3,6)]
sausage <- gro[gro$item == "sausage",-c(1,2,3,6)]
# Combine two years of data and group by month of the year
by_month <- function(x) {
x %>%
group_by(month) %>%
dplyr::summarize(num = n())
}
month_milk <- by_month(milk)
month_other_veg <- by_month(other_veg)
month_root_veg <- by_month(root_veg)
month_rolls <- by_month(rolls)
month_soda <- by_month(soda)
month_yogurt <- by_month(yogurt)
month_tropic_fruit <- by_month(tropic_fruit)
month_citrus_fruit <- by_month(citrus_fruit)
month_water <- by_month(water)
month_sausage <- by_month(sausage)
month_table <- data.frame(month = as.numeric(c(1:12)),
milk = month_milk$num,
other_veg = month_other_veg$num,
root_veg = month_root_veg$num,
rolls = month_rolls$num,
soda = month_soda$num,
yogurt = month_yogurt$num,
tropic_fruit = month_tropic_fruit$num,
citrus_fruit =month_citrus_fruit$num,
water = month_water$num,
sausage = month_sausage$num)
kable(month_table)
# Plotting top six
top_six <- ggplot(data = month_table, aes(x = month)) +
geom_line(aes(y = milk, color = "red")) +
geom_line(aes(y = other_veg, color = "green")) +
geom_line(aes(y = rolls, color = "black")) +
geom_line(aes(y = soda, color = "blue")) +
geom_line(aes(y = yogurt, color = "purple")) +
scale_x_continuous("month",
breaks = c(1:12),
labels = month.abb) +
ylab("Number of Transactions") +
scale_color_identity(name = "Product",
breaks = c("red", "green", "black", "blue", "purple"),
labels = c("Milk", "Other Vegetables", "Rolls/Buns", "Soda", "yogurt"),
guide = "legend")
top_six
setwd("~/Desktop/portfolio/grocery")
grocery <- read.csv("Groceries_dataset.csv")
if(sessionInfo()['basePkgs']=="dplyr" | sessionInfo()['otherPkgs']=="dplyr"){
detach(package:dplyr, unload=TRUE)
}
if(sessionInfo()['basePkgs']=="tm" | sessionInfo()['otherPkgs']=="tm"){
detach(package:sentiment, unload=TRUE)
detach(package:tm, unload=TRUE)
}
library(plyr)
library(arules)
library(arulesViz)
grocery <- read.csv("Groceries_dataset.csv")
setwd("~/Desktop/portfolio/grocery")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
grocery <- read.csv(file = "groceryceries_dataset.csv")
setwd("~/Desktop/portfolio/grocery")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
grocery <- read.csv(file = "groceryceries_dataset.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
grocery <- read.csv(file = "Groceryceries_dataset.csv")
grocery <- read.csv("grocery_dataset.csv")
exam <- read.csv(file = "StudentsPerformance.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
grocery <- read.csv(file = "Groceryceries_dataset.csv")
setwd("~/Desktop/portfolio/grocery")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
grocery <- read.csv(file = "Groceryceries_dataset.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
grocery <- read.csv("Groceries_dataset.csv")
kable(head(grocery))
# Checking NA values
sum(is.na(grocery))
# Rename and re-class the columns
names(grocery) <- c("member_id", "date", "item")
grocery$member_id <- as_factor(grocery$member_id)
grocery$date <- as_date(dmy(grocery$date))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(lubridate)
grocery <- read.csv("Groceries_dataset.csv")
kable(head(grocery))
# Checking NA values
sum(is.na(grocery))
# Rename and re-class the columns
names(grocery) <- c("member_id", "date", "item")
grocery$member_id <- as_factor(grocery$member_id)
grocery$date <- as_date(dmy(grocery$date))
grocery$item <- as_factor(grocery$item)
# Create new columns with number of dates since #epoch date(January 1, 1970).
grocery$trans_id <- as_factor(paste0(grocery$member_id, unclass(grocery$date)))
grocery$month <- month(grocery$date)
grocery$weekday <- weekdays(grocery$date)
item_list <- unique(grocery$item)
num_items <- length(list)
member_list <- unique(grocery$member_id)
num_members <- length(member_list)
# Showing number of transactions.
num_trans <- length(unique(grocery$trans_id))
paste0("From 2014 to 2015, there were ",num_trans, " transactions.")
kable(head(grocery))
item_list
count <- count(grocerycery, grocery$item)
