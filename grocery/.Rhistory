fill = gender)) +
geom_bar(stat = "count") +
xlab("Gender") +
ylab("Count") +
ggtitle("Male Female Ratio")
# Comparing math score by gender
gender_math_graph <- exam %>% select(gender, `math_score`) %>% filter(!is.na(math_score)) %>% ggplot(aes(x=gender, y = math_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
# Comparing reading score by gender
gender_reading_graph <- exam %>% select(gender, `reading_score`) %>% filter(!is.na(reading_score)) %>% ggplot(aes(x=gender, y = reading_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
#Comparing writing score by gender
gender_writing_graph <- exam %>% select(gender, `writing_score`) %>% filter(!is.na(writing_score)) %>% ggplot(aes(x=gender, y = writing_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
## Does race affect performance?
plot_gender
mean_gender
gender_math_graph
gender_reading_graph
gender_writing_graph
mean_race <- aggregate(exam[, 6:8], by = list(exam$race_ethnicity), FUN = mean, na.rm = T)
math_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = math_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Math Scores")
reading_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = reading_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Reading Scores")
writing_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = writing_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Writing Scores")
mean_race
math_race
reading_race
writing_race
mean_parent <- aggregate(exam[, 6:8], by = list(exam$parental_level_of_education), FUN = mean, na.rm = T)
math_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = math_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Math Scores")
reading_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = reading_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Reading Scores")
writing_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = writing_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Writing Scores")
mean_parent
math_parent
reading_parent
writing_parent
lunch_type <- ggplot(data = exam,
aes(x = lunch, fill = lunch)) +
geom_bar(stat = "Count")
lunch_stat <- aggregate(exam[, 6:8], by = list(exam$lunch), FUN = mean, na.rm = T)
lunch_graph_math = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = math_score, fill = lunch)) +
labs(x = "type of lunch", y = "Math Scores")
lunch_graph_reading = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = reading_score, fill = lunch)) +
labs(x = "type of lunch", y = "Reading Scores")
lunch_graph_writing = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = writing_score, fill = lunch)) +
labs(x = "type of lunch", y = "writing Scores")
lunch_type
lunch_stat
lunch_graph_math
lunch_graph_reading
lunch_graph_writing
mean_gender <- aggregate(exam[, 6:8], by = list(exam$gender), FUN = mean, na.rm = T)
View(exam)
count(exam[0:1,], vars = "female")
summary(exam)
tabyl(exam, gender)
install.packages("tabyl")
tabyr(exam, gender)
exam %>% tally()
library(janitor)
install.packages("janitor")
library(janitor)
tabyl(exam, gender, LanguageGroup)
tabyl(exam, gender)
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
exam <- read.csv(file = "StudentsPerformance.csv")
cor(per$writing_score,per$math_score)
cor(exam$writing_score,exam$math_score)
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
exam <- read.csv(file = "StudentsPerformance.csv")
# Checking if there is any missing values, which returns none
which(is.na(exam), arr.ind=TRUE)
# Renaming columns
colnames(exam)<-gsub("\\.","\\_",colnames(exam))
# Shows changes
head(exam, 3)
# Summary of data
summary(exam)
num_gender <- tabyl(exam, gender)
plot_gender <- ggplot(data = exam,
aes(x = gender,
fill = gender)) +
geom_bar(stat = "count") +
xlab("Gender") +
ylab("Count") +
ggtitle("Male Female Ratio")
mean_gender <- aggregate(exam[, 6:8], by = list(exam$gender), FUN = mean, na.rm = T)
# Comparing math score by gender
gender_math_graph <- exam %>% select(gender, `math_score`) %>% filter(!is.na(math_score)) %>% ggplot(aes(x=gender, y = math_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
# Comparing reading score by gender
gender_reading_graph <- exam %>% select(gender, `reading_score`) %>% filter(!is.na(reading_score)) %>% ggplot(aes(x=gender, y = reading_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
#Comparing writing score by gender
gender_writing_graph <- exam %>% select(gender, `writing_score`) %>% filter(!is.na(writing_score)) %>% ggplot(aes(x=gender, y = writing_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
## Does gender affect performance?
num_gender
plot_gender
mean_gender
gender_math_graph
gender_reading_graph
gender_writing_graph
num_race <- tabyl(exam, race_ethnicity)
plot_race <- ggplot(data = exam,
aes(x = race_ethnicity,
fill = race_ethnicity)) +
geom_bar(stat = "count") +
xlab("Race") +
ylab("Count") +
ggtitle("Race Ratio")
mean_race <- aggregate(exam[, 6:8], by = list(exam$race_ethnicity), FUN = mean, na.rm = T)
math_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = math_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Math Scores")
reading_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = reading_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Reading Scores")
writing_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = writing_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Writing Scores")
num_race
plot_race
mean_race
math_race
reading_race
writing_race
num_parent <- tabyl(exam, parental_level_of_education)
plot_parental_level_of_education <- ggplot(data = exam,
aes(x = parental_level_of_education,
fill = parental_level_of_education)) +
geom_bar(stat = "count") +
xlab("Parental level of education") +
ylab("Count") +
ggtitle("Parental level of education Ratio")
mean_parent <- aggregate(exam[, 6:8], by = list(exam$parental_level_of_education), FUN = mean, na.rm = T)
math_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = math_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Math Scores")
reading_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = reading_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Reading Scores")
writing_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = writing_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Writing Scores")
num_parent
plot_parental_level_of_education
mean_parent
math_parent
reading_parent
writing_parent
num_lunch <- tabyl(exam, lunch)
plot_lunch <- ggplot(data = exam,
aes(x = lunch, fill = lunch)) +
geom_bar(stat = "Count")
lunch_stat <- aggregate(exam[, 6:8], by = list(exam$lunch), FUN = mean, na.rm = T)
lunch_graph_math = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = math_score, fill = lunch)) +
labs(x = "type of lunch", y = "Math Scores")
lunch_graph_reading = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = reading_score, fill = lunch)) +
labs(x = "type of lunch", y = "Reading Scores")
lunch_graph_writing = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = writing_score, fill = lunch)) +
labs(x = "type of lunch", y = "writing Scores")
num_lunch
plot_lunch
lunch_stat
lunch_graph_math
lunch_graph_reading
lunch_graph_writing
cor(exam$writing_score,exam$math_score)
score <- exam[,-2:-5]
ggplot(exam,aes(x=writing_score,y=math_score))+
geom_point()+
stat_smooth(method= "lm",col="blue")
split <- sample.split(score,SplitRatio = 0.75)
library(caTools)
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(caTools)
install.packages("caTools")
library(caTools)
split <- sample.split(score,SplitRatio = 0.75)
train <- subset(score, split="TRUE")
test <- subset(score, split="FALSE")
lm <- lm(exam$writing_score~exam$math_score,data=train)
summary(lm)
writing_predict <- predict(lm,train)
plot(exam$score_predict,type="l",lty=1.8,col="red")
plot(exam$score,type="l",lty=1.8,col="red")
plot(exam$writing_scoretype="l",lty=1.8,col="red")
plot(exam$writing_score,type="l",lty=1.8,col="red")
lines(writing_predict,type="l", col="blue")
#predict the writing score using reading score
cor(exam$writing_score,exam$reading_score)
ggplot(exa,,aes(x=writing_score,y=reading_score))+
geom_point()+
stat_smooth(method= "lm",col="blue")
ggplot(exam,aes(x=writing_score,y=reading_score))+
geom_point()+
stat_smooth(method= "lm",col="blue")
lm_df <- lm(score$writing_score~score$reading_score,data=train)
summary(lm_df)
plot(score$writing_score,type="l",col="red")
lines(writing_predict_2,type="l",col="blue")
lm_df <- lm(score$writing_score~score$reading_score,data=train)
summary(lm_df)
writing_predict_2 <- predict(lm_df,train)
plot(score$writing_score,type="l",col="red")
lines(writing_predict_2,type="l",col="blue")
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(caTools)
exam <- read.csv(file = "StudentsPerformance.csv")
# Checking if there is any missing values, which returns none
which(is.na(exam), arr.ind=TRUE)
# Renaming columns
colnames(exam)<-gsub("\\.","\\_",colnames(exam))
# Shows changes
head(exam, 3)
# Summary of data
summary(exam)
num_gender <- tabyl(exam, gender)
plot_gender <- ggplot(data = exam,
aes(x = gender,
fill = gender)) +
geom_bar(stat = "count") +
xlab("Gender") +
ylab("Count") +
ggtitle("Male Female Ratio")
mean_gender <- aggregate(exam[, 6:8], by = list(exam$gender), FUN = mean, na.rm = T)
# Comparing math score by gender
gender_math_graph <- exam %>% select(gender, `math_score`) %>% filter(!is.na(math_score)) %>% ggplot(aes(x=gender, y = math_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
# Comparing reading score by gender
gender_reading_graph <- exam %>% select(gender, `reading_score`) %>% filter(!is.na(reading_score)) %>% ggplot(aes(x=gender, y = reading_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
#Comparing writing score by gender
gender_writing_graph <- exam %>% select(gender, `writing_score`) %>% filter(!is.na(writing_score)) %>% ggplot(aes(x=gender, y = writing_score, color = gender)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.2)
## Does gender affect performance?
num_gender
plot_gender
mean_gender
gender_math_graph
gender_reading_graph
gender_writing_graph
num_race <- tabyl(exam, race_ethnicity)
plot_race <- ggplot(data = exam,
aes(x = race_ethnicity,
fill = race_ethnicity)) +
geom_bar(stat = "count") +
xlab("Race") +
ylab("Count") +
ggtitle("Race Ratio")
mean_race <- aggregate(exam[, 6:8], by = list(exam$race_ethnicity), FUN = mean, na.rm = T)
math_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = math_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Math Scores")
reading_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = reading_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Reading Scores")
writing_race = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = race_ethnicity, y = writing_score, fill = race_ethnicity)) +
labs(x = "Race/Ethnicity", y = "Writing Scores")
num_race
plot_race
mean_race
math_race
reading_race
writing_race
num_parent <- tabyl(exam, parental_level_of_education)
plot_parental_level_of_education <- ggplot(data = exam,
aes(x = parental_level_of_education,
fill = parental_level_of_education)) +
geom_bar(stat = "count") +
xlab("Parental level of education") +
ylab("Count") +
ggtitle("Parental level of education Ratio")
mean_parent <- aggregate(exam[, 6:8], by = list(exam$parental_level_of_education), FUN = mean, na.rm = T)
math_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = math_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Math Scores")
reading_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = reading_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Reading Scores")
writing_parent = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = parental_level_of_education, y = writing_score, fill = parental_level_of_education)) +
labs(x = "Parent Education", y = "Writing Scores")
num_parent
plot_parental_level_of_education
mean_parent
math_parent
reading_parent
writing_parent
num_lunch <- tabyl(exam, lunch)
plot_lunch <- ggplot(data = exam,
aes(x = lunch, fill = lunch)) +
geom_bar(stat = "Count")
lunch_stat <- aggregate(exam[, 6:8], by = list(exam$lunch), FUN = mean, na.rm = T)
lunch_graph_math = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = math_score, fill = lunch)) +
labs(x = "type of lunch", y = "Math Scores")
lunch_graph_reading = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = reading_score, fill = lunch)) +
labs(x = "type of lunch", y = "Reading Scores")
lunch_graph_writing = ggplot(data = exam) +
geom_boxplot(mapping = aes(x = lunch, y = writing_score, fill = lunch)) +
labs(x = "type of lunch", y = "writing Scores")
num_lunch
plot_lunch
lunch_stat
lunch_graph_math
lunch_graph_reading
lunch_graph_writing
#predicting the reading score by using writing score
cor(exam$reading_score,exam$writing_score)
score <- exam[,-2:-5]
ggplot(exam,aes(x=reading_score,y=writing_score))+
geom_point()+
stat_smooth(method= "lm",col="blue")
#Split in to 2 data sets¶
split <- sample.split(score,SplitRatio = 0.75)
train <- subset(score, split="TRUE")
test <- subset(score, split="FALSE")
#Linear Model
lm <- lm(exam$reading_score~exam$writing_score,data=train)
summary(lm)
#Predict the reading score
reading_predict <- predict(lm,train)
# Predict reading data vs Actual reading data
plot(exam$reading_score,type="l",lty=1.8,col="red")
lines(reading_predict,type="l", col="blue")
#predict the reading score using math score
cor(exam$reading_score,exam$math_score)
ggplot(exam,aes(x=reading_score,y=math_score))+
geom_point()+
stat_smooth(method= "lm",col="blue")
lm_df <- lm(score$reading_score~score$math_score,data=train)
summary(lm_df)
reading_predict_2 <- predict(lm_df,train)
#predicted reading score vs actual reading score
plot(score$reading_score,type="l",col="red")
lines(reading_predict_2,type="l",col="blue")
setwd("~/Desktop/portfolio/grocery")
gro <- read.csv(file = "Groceries_dataset.csv")
gro <- read.csv(file = "Groceries_dataset.csv")
setwd("~/Desktop/portfolio/exam")
exam <- read.csv(file = "StudentsPerformance.csv")
gro <- read.csv(file = "Groceries_dataset.csv")
setwd("~/Desktop/portfolio/grocery")
setwd("~/Desktop/portfolio")
gro <- read.csv(file = "grocery/Groceries_dataset.csv")
setwd("~/Desktop/portfolio")
exam <- read.csv(file = "exam/StudentsPerformance.csv")
exam <- read.csv(file = "exam/StudentsPerformance.csv")
setwd("~/Desktop/portfolio")
exam <- read.csv(file = "exam/StudentsPerformance.csv")
setwd("~/Desktop/portfolio/exam")
exam <- read.csv(file = "StudentsPerformance.csv")
setwd("~/Desktop/portfolio/grocery")
gro <- read.csv(file = "Groceries_dataset.csv")
View(gro)
knitr::opts_chunk$set(echo = TRUE)
library(janitor)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(caTools)
gro <- read.csv(file = "Groceries_dataset.csv")
# Rename and re-class the columns
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
library(tidyverse)
library(lubridate)
library(arules)
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
gro$date <- as_date(dmy(gro$date))
gro$item <- as_factor(gro$item)
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$month <- month(gro$date)
gro$weekdays <- weekdays(gro$date)
# How many shopping trips were there?
numTrans <- length(unique(gro$trans_id))
paste0("There were ",numTrans, " transactions.")
gro$weekday <- weekdays(gro$date)
# How many shopping trips were there?
numTrans <- length(unique(gro$trans_id))
paste0("There were ",numTrans, " transactions.")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(arules)
library(arulesViz)
library(knitr)
gro <- read.csv(file = "Groceries_dataset.csv")
# Rename and re-class the columns
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
gro$date <- as_date(dmy(gro$date))
gro$item <- as_factor(gro$item)
# Create new columns
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
# Note that date portion of the transaction id is the number of days since January 1, 1970
gro$month <- month(gro$date)
gro$weekday <- weekdays(gro$date)
# How many shopping trips were there?
numTrans <- length(unique(gro$trans_id))
paste0("There were ",numTrans, " transactions.")
View(gro)
item_list <- unique(gro$item)
num_items <- length(list)
member_list <- unique(gro$member_id)
num_members <- length(member_list)
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-counts$num),]
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-count$num),]
# Add a field that converts count to fraction of total purchases
sorted_count $prop <- sorted_count$num/num_trans
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-count$num),]
# Add a field that converts count to fraction of total purchases
sorted_count$prop <- sorted_count$num/num_trans
# Rename and re-class the columns
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
gro$date <- as_date(dmy(gro$date))
gro$item <- as_factor(gro$item)
# Create new columns with number of dates since #epoch date(January 1, 1970).
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$month <- month(gro$date)
gro$weekday <- weekdays(gro$date)
# Showing number of transactions.
num_trans <- length(unique(gro$trans_id))
paste0("From 2014 to 2015, there were ",num_trans, " transactions.")
count <- count(gro, gro$item)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(arules)
library(arulesViz)
library(knitr)
gro <- read.csv(file = "Groceries_dataset.csv")
kable(head(gro))
# Rename and re-class the columns
names(gro) <- c("member_id", "date", "item")
gro$member_id <- as_factor(gro$member_id)
gro$date <- as_date(dmy(gro$date))
gro$item <- as_factor(gro$item)
# Create new columns with number of dates since #epoch date(January 1, 1970).
gro$trans_id <- as_factor(paste0(gro$member_id, unclass(gro$date)))
gro$month <- month(gro$date)
gro$weekday <- weekdays(gro$date)
# Showing number of transactions.
num_trans <- length(unique(gro$trans_id))
paste0("From 2014 to 2015, there were ",num_trans, " transactions.")
kable(head(gro))
item_list <- unique(gro$item)
num_items <- length(list)
member_list <- unique(gro$member_id)
num_members <- length(member_list)
item_list
count <- count(gro, gro$item)
names(count) <- c("item", "num")
# sort items by number of times purchased
sorted_count <- count[order(-count$num),]
# Add a field that converts count to fraction of total purchases
sorted_count$prop <- sorted_count$num/num_trans
top_ten <- sorted_count[1:10,]
# Reverse the order for horizontal Pareto chart
top_ten_rev <- sorted_count[10:1,]
